#
# Copyright (c) 2016, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX OR PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ################################################################################
# #
# # PATENT NOTICE
# #
# # This software is distributed under the BSD 2-clause License (see LICENSE
# # file).  This BSD License does not make any patent claims and as such, does
# # not act as a patent grant.  The purpose of this section is for each contributor
# # to define their intentions with respect to intellectual property.
# #
# # Each contributor to this source code is encouraged to state their patent
# # claims and licensing mechanisms for any contributions made. At the end of
# # this section contributors may each make their own statements.  Contributor's
# # claims and grants only apply to the pieces (source code, programs, text,
# # media, etc) that they have contributed directly to this software.
# #
# # There is no guarantee that this section is complete, up to date or accurate. It
# # is up to the contributors to maintain their portion of this section and up to
# # the user of the software to verify any claims herein.
# #
# # Do not remove this header notification.  The contents of this section must be
# # present in all distributions of the software.  You may only modify your own
# # intellectual property statements.  Please provide contact information.
#
# - Palo Alto Research Center, Inc
# This software distribution does not grant any rights to patents owned by Palo
# Alto Research Center, Inc (PARC). Rights to these patents are available via
# various mechanisms. As of January 2016 PARC has committed to FRAND licensing any
# intellectual property used by its contributions to this software. You may
# contact PARC at cipo@parc.com for more information or visit http://www.ccnx.org
#

###############################################################################
#
# Distillery default configuration
#
# DO NOT EDIT THIS FILE!!
#
# You can set your user configuration in the file ${HOME}/.ccnx/distillery/config.mk
# You can set your local configuration in the file [DISTILLERY]/config/config.mk
# You can use this file as a template. It will be included in the Makefile.
#
# Make will first parse the USER_CONFIG file. Later the LOCAL_CONFIG file.
# Finally the DEFAULT_CONFIG file will be parsed.
#
# If variables are directly assigned (=), they will override previous definitions
# If variables are conditionally assigned (?=) then the previous value will
# carry.  This default file will use conditional assignments for statements. So
# if the variables are assigned in the USER_CONFIG or LOCAL_CONFIG files they
# will NOT be overriden. Only in the case when a variable is not defined it
# will be defined by this file.
#
# In the most typical situations the USER_CONFIG and LOCAL_CONFIG will use
# direct assignment of variables.
#
###############################################################################

#DISTILLERY_GITHUB_URL
# The base URL from where modules will be checked out.
# Note that this must include the trailing character
DISTILLERY_GITHUB_URL?=https://github.com/

#DISTILLERY_GITHUB_URL_USER=PARC
# The user where we check the repositories from
DISTILLERY_GITHUB_URL_USER?=PARC

#DISTILLERY_GITHUB_UPSTREAM_URL=git://github.com/PARC
# The URL of the github upstream for the repositories
DISTILLERY_GITHUB_UPSTREAM_URL?=git://github.com/PARC

#DISTILLERY_GITHUB_UPSTREAM_NAME?=parc_upstream
# The name to give this upstream
DISTILLERY_GITHUB_UPSTREAM_NAME?=parc_upstream

# DISTILLERY_GITHUB_UPSTREAM_REPO=${DISTILLERY_GITHUB_UPSTREAM_URL}/CCNx_Distillery
# The upstream that we expect on Distillery itself.
DISTILLERY_GITHUB_UPSTREAM_REPO?=${DISTILLERY_GITHUB_UPSTREAM_URL}/CCNx_Distillery

# DISTILLERY_ROOT_DIR=/path/to/root/dir
# This is the root directory of the Distillery distribution. Many other paths depend
# on this. This file assumes that make is being run from the DISTILLERY
# directory. If this is not true, it's convenient to assign the variable at the
# shell.
DISTILLERY_ROOT_DIR?=$(shell pwd)

# This is a variable that can be used to multiplex the build.
# If you set this variable the default output directories will have this
# appended to them
DISTILLERY_BUILD_NAME?=

# This is the directory where things are built.
# Note that if some modules don't support off-tree builds you may have problems
DISTILLERY_BUILD_DIR?=${DISTILLERY_ROOT_DIR}/build${DISTILLERY_BUILD_NAME}

# This is the directory where the source is checked out.
DISTILLERY_SOURCE_DIR?=${DISTILLERY_ROOT_DIR}/src

# MAKE_BUILD_FLAGS
# Flags to pass to make when building the projects. This is mostly used for
# parallel builds. Disable by setting it to empty
MAKE_BUILD_FLAGS?=-j8

# DISTILLERY_INSTALL_DIR=/path/to/install/dir
# This is the directory where all the ccn software will be installed. This
# directory will be DELETED if you do a make clobber. Do not treat this the
# same way you would treat a system install directory.
DISTILLERY_INSTALL_DIR?=${DISTILLERY_ROOT_DIR}/usr${DISTILLERY_BUILD_NAME}

# DISTILLERY_DEPENDENCIES_DIR=/path/to/dependencies/dir
# This is the path to the dependencies directory. It is used as the base for
# the dependencies install directories. (tools and libraries)
# You should normally not edit this variable.
DISTILLERY_DEPENDENCIES_DIR?=/usr/local/ccnx/dependencies

# DISTILLERY_EXTERN_DIR=/path/to/dependencies/external/install/dir
# This is the directory where the dependencies will be installed. This
# directory is deleted and created as needed by the dependencies system.
# It is used in gravy for includes and linking. This should be for the TARGET
# architecture.
DISTILLERY_EXTERN_DIR?=${DISTILLERY_DEPENDENCIES_DIR}/build
CCNX_DEPENDENCIES?=${DISTILLERY_EXTERN_DIR}
export CCNX_DEPENDENCIES

# DISTILLERY_TOOLS_DIR=/path/to/dependency/tools/dir
# This directory holds some of the tools needed to build libccnx. It should be
# built for the HOST. The directory might be deleted and rebuilt by the
# dependency system. The directory will be included in the execution PATH as
# Distillery builds all the modules.
DISTILLERY_TOOLS_DIR?=${DISTILLERY_DEPENDENCIES_DIR}/build-tools

# DISTILLERY_XCODE_DIR?=${DISTILLERY_ROOT_DIR}/xcode
# Directory where distillery will create the xcode project files. This is done
# via cmake's build system. Modules that don't use cmake won't have a way to
# create this unless the Makefile provides a way.
DISTILLERY_XCODE_DIR?=${DISTILLERY_ROOT_DIR}/xcode

# CMAKE_MAKE_TEST_ARGS="ARGS=-j16"
# Tell CTest (via CMake) to run parallel tests (16)
# To run only 1 test at a time run with -j1 or set it empty
CMAKE_MAKE_TEST_ARGS?="ARGS=-j16"


# CMAKE_BUILD_TYPE_FLAG=-DCMAKE_BUILD_TYPE=DEBUG
# The type of build we are doing.
# set it to RELEASE if you want an optimized build  (-O3)
# Options:
#  DEBUG           eg. -O0 -g
#  RELEASE         eg. -O3 -NDEBUG
#  RELWITHDEBINFO  eg  -O2 -g -NDEBUG
#CMAKE_BUILD_TYPE_FLAG?=-DCMAKE_BUILD_TYPE=RELEASE

# DISABLE_UBUNTU_PACKAGE_CHECK
# This setting disables checking that the ubuntu packages are installed. In the default
# mode the build will fail if the packages are not installed.
# See the related setting DISABLE_UBUNTU_CHECK for system checks.
# NOTE: Any value is considered true!
#DISABLE_UBUNTU_PACKAGE_CHECK=True

# DISABLE_UBUNTU_CHECK
# This setting disables checking that the current system is the supported Ubuntu version
# If you are on Linux, and it's not the supported ubuntu version the build will fail.
# If you disable this setting the build system will not check. (For example if you wanted to build
# on Debian. See the related setting DISABLE_UBUNTU_PACKAGE_CHECK
# NOTE: Any value is considered true!
DISABLE_UBUNTU_CHECK=True

# CCNX_HOME
# These variables are used by scripts to know where to find the installed
# CCNX software and libaries.  They are also used by various packaging scripts.
CCNX_HOME=${DISTILLERY_INSTALL_DIR}
